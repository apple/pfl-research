# Reference: https://circleci.com/docs/configuration-reference
version: 2.1

executors:
  linux-python:
    docker:
      - image: cimg/python:3.10.13

commands:
  full_install_steps:
    parameters:
      extras:
        type: string
        # Default to installing all extras
        default: "tf pytorch trees"
    steps:
      - checkout
      - run:
          # Cannot set parameters.extras directly in cache key
          name: Create extras file for cache key
          command: echo "<< parameters.extras >>" > extras.txt
      - run:
          name: Install Poetry and configure virtualenv location
          command: |
            pip install poetry
            poetry config virtualenvs.in-project true
      - restore_cache:
          keys:
            - v2-poetry-deps-{{ checksum "poetry.lock" }}-{{ checksum "extras.txt" }}
      - run:
          name: Install dependencies
          command: |
            poetry install -E "<< parameters.extras >>" -q || true
            poetry run ./build_scripts/install_horovod.sh "<< parameters.extras >>" true
      - save_cache:
          paths:
            - .venv
          key: v2-poetry-deps-{{ checksum "poetry.lock" }}-{{ checksum "extras.txt" }}
  benchmark_install_steps:
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd benchmarks
            pip install poetry
            poetry install -E tf -E pytorch --no-root || true
            echo 'export PYTHONPATH=.' >> $BASH_ENV
  run_cifar10:
    description: "Run a few iterations of CIFAR10 training"
    parameters:
      framework:
        type: string
    steps:
      - run:
          name: "(<< parameters.framework >>) run a few iterations of CIFAR10 training"
          command: |
            cd benchmarks
            poetry run python image_classification/<< parameters.framework >>/train.py \
              --args_config image_classification/configs/baseline.yaml \
              --central_num_iterations 11 --cohort_size 2 --val_cohort_size 2
  run_lm:
    description: "Run a few iterations of LM training"
    parameters:
      framework:
        type: string
    steps:
      - run:
          name: "(<< parameters.framework >>) run a few iterations of LM training"
          command: |
            cd benchmarks
            poetry run python -m lm.<< parameters.framework >>.train \
              --args_config lm/configs/baseline.yaml \
              --data_path ./data/stackoverflow/stackoverflow_ci.hdf5 \
              --central_num_iterations 3 --cohort_size 2 --val_cohort_size 2 \
              --central_data_fraction 1.0

jobs:
  code-quality:
    executor: linux-python
    steps:
      - checkout
      - run:
          name: "Run pre-commit hooks"
          command: |
            pip install pre-commit
            make check
            if ! git diff --quiet; then echo 'Style checks failed, please install pre-commit and run pre-commit run --all and push the change'; exit 1; fi

  build-documentation-wheel:
    executor: linux-python
    steps:
      - full_install_steps:
          extras: "tf pytorch trees"
      - run:
          name: "Build documentation"
          command: make docs
      - run: 
          name: "Build wheel"
          command: make build
      - run: 
          name: "Install wheel"
          command: python -m pip install dist/*.whl

  test-tf:
    executor: linux-python
    resource_class: large
    steps:
      - full_install_steps:
          extras: "tf trees"
      - run:
          name: "Test with TensorFlow"
          command: make test

  test-pytorch:
    executor: linux-python
    resource_class: large
    steps:
      - full_install_steps:
          extras: "pytorch trees"
      - run:
          name: "Test with PyTorch"
          command: make test

  test-benchmarks:
    executor: linux-python
    steps:
      - benchmark_install_steps
      - run:
          name: "Run tests in benchmarks"
          command: |
            cd benchmarks
            poetry run pytest test/ --durations 0 -n4

  check-run-cifar10:
    executor: linux-python
    steps:
      - benchmark_install_steps
      - run:
          name: "Download data"
          command: |
            mkdir -p ./benchmarks/data/cifar10
            curl https://pfl-data.s3.us-east-2.amazonaws.com/cifar10_ci/cifar10_train.p \
              -o ./benchmarks/data/cifar10/cifar10_train.p
            curl https://pfl-data.s3.us-east-2.amazonaws.com/cifar10_ci/cifar10_test.p \
              -o ./benchmarks/data/cifar10/cifar10_test.p
      - run_cifar10:
          framework: pytorch
      - run_cifar10:
          framework: tf

  check-run-lm:
    executor: linux-python
    steps:
      - benchmark_install_steps
      - run:
          name: "Download data"
          command: |
            mkdir -p ./benchmarks/data/stackoverflow
            curl https://pfl-data.s3.us-east-2.amazonaws.com/stackoverflow/stackoverflow_ci.hdf5 \
              -o ./benchmarks/data/stackoverflow/stackoverflow_ci.hdf5
      - run_lm:
          framework: pytorch
      - run_lm:
          framework: tf

  check-run-flair:
    executor: linux-python
    steps:
      - benchmark_install_steps
      - run:
          name: "Download data"
          command: |
            mkdir -p ./benchmarks/data/flair
            curl https://pfl-data.s3.us-east-2.amazonaws.com/flair/flair_federated_ci.hdf5 \
              -o ./benchmarks/data/flair/flair_federated_ci.hdf5
      - run:
          name: "(PyTorch) run a few iterations of training"
          command: |
            cd benchmarks
            poetry run python -m flair.train \
              --args_config flair/configs/baseline.yaml \
              --data_path ./data/flair/flair_federated_ci.hdf5 \
              --central_num_iterations 3 --cohort_size 2 --val_cohort_size 2


  publish-wheel:
    executor: linux-python
    steps:
      - checkout
      - run:
          name: "Publish wheel"
          command: make build-and-publish

  publish-documentation:
    executor: linux-python
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1f:58:50:56:ce:6c:63:5c:77:c1:34:a0:f5:bd:9f:b7"
      - full_install_steps:
          extras: "tf pytorch trees"
      - run:
          name: "Publish docs"
          command: make docs-and-publish

workflows:
  build_and_test:
    when:
      matches:
        # Only on branches approved by Apple CircleCI policy:
        # https://app.circleci.com/settings/organization/github/apple/policies/baseline_apple
        pattern: "^main$|^develop$|gh-readonly-queue/main/pr-\\d+-[0-9a-f]{40}.*$"
        value: << pipeline.git.branch >>
    jobs:
      - code-quality
      - build-documentation-wheel
      - test-tf
      - test-pytorch
      - test-benchmarks
      - check-run-cifar10
      - check-run-lm
      - check-run-flair

      # TODO: rdar://120414177 (optional CI for docker image (build only))
      #- build-images:
      #    # Only verify build images on release candidates.
      #    filters:
      #      branches:
      #        only: /^release-.*/

      - publish-wheel:
          # Only publish package on new tag.
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-documentation:
          # Only publish docs on commit to main.
          filters:
            branches:
              only: main

  build_and_test-pr:
    when:
      matches:
        # PR builds need approval, as per Apple CircleCI policy:
        # https://app.circleci.com/settings/organization/github/apple/policies/baseline_apple
        pattern: "^pull/\\d+(/head)?$"
        value: << pipeline.git.branch >>
    jobs:
      - hold:
          type: approval
      - code-quality:
          requires:
            - hold
      - build-documentation-wheel:
          requires:
            - hold
      - test-tf:
          requires:
            - hold
      - test-pytorch:
          requires:
            - hold
      - test-benchmarks:
          requires:
            - hold
      - check-run-cifar10:
          requires:
            - hold
      - check-run-flair:
          requires:
            - hold



